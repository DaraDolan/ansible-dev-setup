---
- name: Include platform-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Clean apt cache and update
  shell: |
    apt clean
    apt update
  when: ansible_os_family == "Debian"
  become: true

- name: Install packages (Ubuntu)
  apt:
    name: "{{ software_packages }}"
    state: present
    force_apt_get: yes
  when: ansible_os_family == "Debian"
  become: true

- name: Install Node.js and npm via snap (cleaner dependencies)
  snap:
    name: node
    classic: yes
  when: ansible_os_family == "Debian"
  become: true

- name: Install Homebrew packages (macOS)
  homebrew:
    name: "{{ software_packages }}"
    state: present
    update_homebrew: yes
  when: ansible_os_family == "Darwin"

- name: Fix duplicate repository entries
  shell: |
    rm -f /etc/apt/sources.list.d/ppa_neovim_ppa_unstable_jammy.list
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Install apt-utils
  apt:
    name: apt-utils
    state: present
    update_cache: yes
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Install libc-bin
  apt:
    name: libc-bin
    state: present
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Install locales
  apt:
    name: locales
    state: present
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Ensure en_US.UTF-8 locale is available
  lineinfile:
    path: /etc/locale.gen
    regexp: '^# en_US.UTF-8 UTF-8'
    line: 'en_US.UTF-8 UTF-8'
    state: present
  become: true
  when: ansible_os_family == "Debian"
  register: locale_gen_file
  ignore_errors: true

- name: Generate locales
  command: locale-gen
  become: true
  when: ansible_os_family == "Debian" and locale_gen_file is success and locale_gen_file.changed
  ignore_errors: true

- name: Set environment variables for UTF-8 support
  blockinfile:
    path: /etc/profile.d/locale.sh
    create: yes
    block: |
      export LANG=en_US.UTF-8
      export LANGUAGE=en_US:en
      export LC_ALL=en_US.UTF-8
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true

# Get the correct user info for Claude settings
- name: Get current username
  command: whoami
  register: username_result
  changed_when: false
  become: false

- name: Get user's home directory
  shell: 'echo $HOME'
  register: user_home
  changed_when: false
  become: false

# Create Claude configuration directory and disable telemetry
- name: Create Claude configuration directory
  file:
    path: "{{ user_home.stdout }}/.claude"
    state: directory
    mode: 0755
    owner: "{{ username_result.stdout }}"
    group: "{{ username_result.stdout }}"
  become: false

- name: Install Claude settings to disable telemetry
  copy:
    src: "claude-settings.json"
    dest: "{{ user_home.stdout }}/.claude/settings.json"
    force: yes
    owner: "{{ username_result.stdout }}"
    group: "{{ username_result.stdout }}"
    mode: 0644
  become: false

# Install UV Python package manager
- name: Install UV Python package manager
  shell: curl -LsSf https://astral.sh/uv/install.sh | sh
  args:
    creates: "{{ user_home.stdout }}/.local/bin/uv"
  become: false

- name: Add UV to PATH in shell profile
  lineinfile:
    path: "{{ user_home.stdout }}/.bashrc"
    line: 'export PATH="$HOME/.local/bin:$PATH"'
    state: present
  become: false

- name: Add UV to PATH in zsh profile
  lineinfile:
    path: "{{ user_home.stdout }}/.zshrc"
    line: 'export PATH="$HOME/.local/bin:$PATH"'
    state: present
  become: false
  ignore_errors: true

# Configure Git settings (configurable via variables)
- name: Set Git user name
  git_config:
    name: user.name
    scope: "{{ git_config_scope }}"
    value: "{{ git_user_name }}"
  become: false
  when: configure_git | default(true)

- name: Set Git user email
  git_config:
    name: user.email
    scope: "{{ git_config_scope }}"
    value: "{{ git_user_email }}"
  become: false
  when: configure_git | default(true)

- name: Set Git default branch
  git_config:
    name: init.defaultBranch
    scope: "{{ git_config_scope }}"
    value: "{{ git_default_branch }}"
  become: false
  when: configure_git | default(true)

- name: Set Git pull strategy
  git_config:
    name: pull.rebase
    scope: "{{ git_config_scope }}"
    value: "{{ git_pull_rebase | string | lower }}"
  become: false
  when: configure_git | default(true)

# Install Playwright for web automation and MCP server support
- name: Install Playwright and dependencies for web automation
  block:
    - name: Check if npm is available
      command: npm --version
      register: npm_check
      changed_when: false
      failed_when: false

    - name: Install Playwright test package globally
      npm:
        name: "@playwright/test"
        global: yes
        state: present
      when: npm_check.rc == 0

    - name: Install Playwright system dependencies
      shell: |
        export PATH="/snap/bin:$PATH"
        npx playwright install-deps
      args:
        executable: /bin/bash
      become: true
      changed_when: "'Installing' in playwright_deps.stdout"
      register: playwright_deps
      when: npm_check.rc == 0

    - name: Install Chromium browser for Playwright
      shell: |
        export PATH="/snap/bin:$PATH"
        npx playwright install chromium
      args:
        executable: /bin/bash
      changed_when: "'Downloading' in chrome_install.stdout"
      register: chrome_install
      when: npm_check.rc == 0

    - name: Verify Playwright installation
      shell: |
        export PATH="/snap/bin:$PATH"
        npx playwright --version
      args:
        executable: /bin/bash
      register: playwright_version
      changed_when: false
      when: npm_check.rc == 0

  rescue:
    - name: Handle Playwright installation failure
      debug:
        msg: "Playwright installation failed. Ensure Node.js/npm is properly installed."

  when: install_playwright | default(true)
  tags:
    - playwright
    - web-automation
    - testing
