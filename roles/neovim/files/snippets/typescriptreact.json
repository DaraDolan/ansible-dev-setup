{
  "React Functional Component with Props": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:children}?: React.ReactNode;",
      "  ${3:className}?: string;",
      "  ${4:prop}?: ${5:string};",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  ${2:children},",
      "  ${3:className} = '',",
      "  ${4:prop},",
      "  ...props",
      "}) => {",
      "  return (",
      "    <div className={\\`${6:base-classes} \\${${3:className}\\}\\`} {...props}>",
      "      ${2:children}",
      "      ${0}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React FC with props and Tailwind classes"
  },
  "Button Component": {
    "prefix": "btn",
    "body": [
      "interface ButtonProps {",
      "  children: React.ReactNode;",
      "  variant?: 'primary' | 'secondary' | 'danger';",
      "  size?: 'sm' | 'md' | 'lg';",
      "  disabled?: boolean;",
      "  onClick?: () => void;",
      "  className?: string;",
      "}",
      "",
      "const Button: React.FC<ButtonProps> = ({",
      "  children,",
      "  variant = 'primary',",
      "  size = 'md',",
      "  disabled = false,",
      "  onClick,",
      "  className = '',",
      "  ...props",
      "}) => {",
      "  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';",
      "  ",
      "  const variantClasses = {",
      "    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',",
      "    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900 focus:ring-gray-500',",
      "    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',",
      "  };",
      "  ",
      "  const sizeClasses = {",
      "    sm: 'px-3 py-2 text-sm',",
      "    md: 'px-4 py-2 text-base',",
      "    lg: 'px-6 py-3 text-lg',",
      "  };",
      "",
      "  const classes = \\`\\${baseClasses} \\${variantClasses[variant]} \\${sizeClasses[size]} \\${disabled ? 'opacity-50 cursor-not-allowed' : ''} \\${className}\\`;",
      "",
      "  return (",
      "    <button",
      "      className={classes}",
      "      disabled={disabled}",
      "      onClick={onClick}",
      "      {...props}",
      "    >",
      "      {children}",
      "    </button>",
      "  );",
      "};"
    ],
    "description": "Reusable Button component with Tailwind"
  },
  "Card Component": {
    "prefix": "card",
    "body": [
      "interface CardProps {",
      "  children: React.ReactNode;",
      "  title?: string;",
      "  footer?: React.ReactNode;",
      "  className?: string;",
      "}",
      "",
      "const Card: React.FC<CardProps> = ({ children, title, footer, className = '' }) => {",
      "  return (",
      "    <div className={\\`bg-white rounded-lg shadow-md overflow-hidden \\${className}\\`}>",
      "      {title && (",
      "        <div className=\"px-6 py-4 border-b border-gray-200\">",
      "          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>",
      "        </div>",
      "      )}",
      "      <div className=\"px-6 py-4\">",
      "        {children}",
      "      </div>",
      "      {footer && (",
      "        <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">",
      "          {footer}",
      "        </div>",
      "      )}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Card component with Tailwind styling"
  },
  "Input Component": {
    "prefix": "input",
    "body": [
      "interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {",
      "  label?: string;",
      "  error?: string;",
      "  helperText?: string;",
      "}",
      "",
      "const Input: React.FC<InputProps> = ({ ",
      "  label, ",
      "  error, ",
      "  helperText, ",
      "  className = '', ",
      "  ...props ",
      "}) => {",
      "  return (",
      "    <div className=\"w-full\">",
      "      {label && (",
      "        <label className=\"block text-sm font-medium text-gray-700 mb-2\">",
      "          {label}",
      "        </label>",
      "      )}",
      "      <input",
      "        className={\\`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 \\${",
      "          error ? 'border-red-500' : 'border-gray-300'",
      "        } \\${className}\\`}",
      "        {...props}",
      "      />",
      "      {error && (",
      "        <p className=\"mt-1 text-sm text-red-600\">{error}</p>",
      "      )}",
      "      {helperText && !error && (",
      "        <p className=\"mt-1 text-sm text-gray-500\">{helperText}</p>",
      "      )}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Input component with validation styling"
  },
  "Modal Component": {
    "prefix": "modal",
    "body": [
      "interface ModalProps {",
      "  isOpen: boolean;",
      "  onClose: () => void;",
      "  title?: string;",
      "  children: React.ReactNode;",
      "}",
      "",
      "const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {",
      "  if (!isOpen) return null;",
      "",
      "  return (",
      "    <div className=\"fixed inset-0 z-50 overflow-y-auto\">",
      "      <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">",
      "        <div className=\"fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75\" onClick={onClose} />",
      "        ",
      "        <div className=\"inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl\">",
      "          {title && (",
      "            <div className=\"flex items-center justify-between mb-4\">",
      "              <h3 className=\"text-lg font-medium leading-6 text-gray-900\">{title}</h3>",
      "              <button",
      "                onClick={onClose}",
      "                className=\"text-gray-400 hover:text-gray-600\"",
      "              >",
      "                <span className=\"sr-only\">Close</span>",
      "                âœ•",
      "              </button>",
      "            </div>",
      "          )}",
      "          {children}",
      "        </div>",
      "      </div>",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Modal component with backdrop"
  },
  "Flex Center": {
    "prefix": "flex-center",
    "body": [
      "<div className=\"flex items-center justify-center ${1:h-screen}\">",
      "  ${0}",
      "</div>"
    ],
    "description": "Flex container with centered content"
  },
  "Responsive Grid": {
    "prefix": "grid",
    "body": [
      "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-${1:6}\">",
      "  ${0}",
      "</div>"
    ],
    "description": "Responsive grid layout"
  },
  "Loading Spinner": {
    "prefix": "spinner",
    "body": [
      "const Spinner = () => (",
      "  <div className=\"flex items-center justify-center\">",
      "    <div className=\"animate-spin rounded-full h-${1:8} w-${1:8} border-b-2 border-${2:blue}-600\"></div>",
      "  </div>",
      ");"
    ],
    "description": "Loading spinner component"
  }
}