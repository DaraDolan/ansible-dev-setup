{
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:// props}",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${3:props} }) => {",
      "  return (",
      "    <div className=\"${4:container}\">",
      "      ${0:// content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Functional Component with TypeScript"
  },
  "React useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState${2:<${3:type}>}(${4:initialValue});"
    ],
    "description": "React useState hook"
  },
  "React useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// effect}",
      "  ${2:return () => {",
      "    // cleanup",
      "  };}",
      "}, [${3:dependencies}]);"
    ],
    "description": "React useEffect hook"
  },
  "React useCallback": {
    "prefix": "useCallback",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "  (${2:args}) => {",
      "    ${3:// callback logic}",
      "  },",
      "  [${4:dependencies}]",
      ");"
    ],
    "description": "React useCallback hook"
  },
  "React useMemo": {
    "prefix": "useMemo",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {",
      "  return ${2:// computation};",
      "}, [${3:dependencies}]);"
    ],
    "description": "React useMemo hook"
  },
  "Tailwind Button": {
    "prefix": "btn",
    "body": [
      "<button className=\"${1:px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors}\">",
      "  ${0:Button Text}",
      "</button>"
    ],
    "description": "Tailwind CSS Button"
  },
  "Tailwind Card": {
    "prefix": "card",
    "body": [
      "<div className=\"${1:bg-white rounded-lg shadow-md p-6}\">",
      "  ${0:// Card content}",
      "</div>"
    ],
    "description": "Tailwind CSS Card"
  },
  "Tailwind Grid": {
    "prefix": "grid",
    "body": [
      "<div className=\"${1:grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4}\">",
      "  ${0:// Grid items}",
      "</div>"
    ],
    "description": "Tailwind CSS Grid"
  },
  "Tailwind Flex Center": {
    "prefix": "flex-center",
    "body": [
      "<div className=\"${1:flex items-center justify-center}\">",
      "  ${0:// Centered content}",
      "</div>"
    ],
    "description": "Tailwind CSS Flex Center"
  },
  "React Context": {
    "prefix": "context",
    "body": [
      "import React, { createContext, useContext, ReactNode } from 'react';",
      "",
      "interface ${1:ContextName}Value {",
      "  ${2:// context value type}",
      "}",
      "",
      "const ${1:ContextName}Context = createContext<${1:ContextName}Value | undefined>(undefined);",
      "",
      "export const use${1:ContextName} = () => {",
      "  const context = useContext(${1:ContextName}Context);",
      "  if (!context) {",
      "    throw new Error('use${1:ContextName} must be used within a ${1:ContextName}Provider');",
      "  }",
      "  return context;",
      "};",
      "",
      "interface ${1:ContextName}ProviderProps {",
      "  children: ReactNode;",
      "}",
      "",
      "export const ${1:ContextName}Provider: React.FC<${1:ContextName}ProviderProps> = ({ children }) => {",
      "  ${3:// provider logic}",
      "  ",
      "  const value = {",
      "    ${4:// context value}",
      "  };",
      "",
      "  return (",
      "    <${1:ContextName}Context.Provider value={value}>",
      "      {children}",
      "    </${1:ContextName}Context.Provider>",
      "  );",
      "};"
    ],
    "description": "React Context with TypeScript"
  }
}