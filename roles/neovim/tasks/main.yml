---
- name: Include platform-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

# Get the correct user info
- name: Get current username
  command: whoami
  register: username_result
  changed_when: false
  become: false

- name: Get user's home directory
  shell: 'echo $HOME'
  register: user_home
  changed_when: false
  become: false

# Install Neovim repository and dependencies
- name: Install software-properties-common (for add-apt-repository)
  apt:
    name: software-properties-common
    state: present
  when: ansible_os_family == "Debian"
  become: true

- name: Add Neovim unstable PPA
  apt_repository:
    repo: ppa:neovim-ppa/unstable
    state: present
  when: ansible_os_family == "Debian"
  become: true

# Install Neovim and dependencies
- name: Install Neovim and dependencies (Debian/Ubuntu)
  apt:
    name: "{{ neovim_packages }}"
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  become: true

- name: Install Neovim and dependencies (macOS)
  homebrew:
    name: "{{ item }}"
    state: present
  with_items: "{{ neovim_packages }}"
  when: ansible_os_family == "Darwin"

- name: Create Python virtual environment for Neovim
  shell: python3 -m venv "{{ user_home.stdout }}/.config/nvim/env"
  args:
    creates: "{{ user_home.stdout }}/.config/nvim/env/bin/python"
  become: false

- name: Install pynvim in the virtual environment
  shell: "{{ user_home.stdout }}/.config/nvim/env/bin/pip install pynvim"
  args:
    creates: "{{ user_home.stdout }}/.config/nvim/env/lib/python*/site-packages/pynvim"
  become: false


# Install Python and Node.js providers for Neovim

- name: Install Node.js provider for Neovim
  npm:
    name: neovim
    global: yes
    state: latest
  become: false
  environment:
    npm_config_prefix: "{{ user_home.stdout }}/.local"

- name: Create neovim node directory if needed
  file:
    path: "{{ ansible_env.HOME }}/.local/lib/node_modules/neovim/bin"
    state: directory
    mode: 0755
  when: ansible_os_family == 'Debian'

  become: true

- name: Install PHP and Composer (for phpactor plugin)
  apt:
    name:
      - php-cli
      - unzip
    state: present
  when: ansible_os_family == "Debian"
  become: true

- name: Download Composer installer
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer-setup.php
    mode: 0755
  when: ansible_os_family == "Debian"

- name: Install Composer globally
  command: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
  args:
    creates: /usr/local/bin/composer
  when: ansible_os_family == "Debian"
  become: true

- name: Install luarocks (for Hererocks support)
  apt:
    name: luarocks
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Install Perl provider dependencies
  apt:
    name:
      - perl
      - cpanminus
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Install Perl Neovim provider
  command: cpanm -n Neovim::Ext
  become: true
  when: ansible_os_family == "Debian"

- name: Install Ruby and gem
  apt:
    name:
      - ruby
      - ruby-dev
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Install Ruby Neovim provider
  gem:
    name: neovim
    state: latest
  become: true
  when: ansible_os_family == "Debian"

- name: Install FZF for Telescope
  apt:
    name: fzf
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Build Telescope FZF native extension
  shell: cd ~/.local/share/nvim/lazy/telescope-fzf-native.nvim && make
  args:
    creates: "~/.local/share/nvim/lazy/telescope-fzf-native.nvim/build"
  register: fzf_build
  failed_when: false
  become: false
  when: ansible_os_family == "Debian"

# Create config directories
- name: Create base config directory
  file:
    path: "{{ user_home.stdout }}/.config"
    state: directory
    mode: 0755
    owner: "{{ username_result.stdout }}"
    group: "{{ username_result.stdout }}"
  become: false

- name: Create Neovim configuration directories
  file:
    path: "{{ user_home.stdout }}/.config/nvim/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ username_result.stdout }}"
    group: "{{ username_result.stdout }}"
  with_items:
    - ""
    - "lua"
    - "lua/core"
    - "lua/plugins"
    - "snippets"
  become: false

# Copy configuration files
- name: Copy Neovim main configuration
  copy:
    src: "init.lua"
    dest: "{{ user_home.stdout }}/.config/nvim/init.lua"
    force: yes
  become: false

- name: Copy Neovim core configuration files
  copy:
    src: "lua/core/{{ item }}"
    dest: "{{ user_home.stdout }}/.config/nvim/lua/core/{{ item }}"
    force: yes
  with_items:
    - "init.lua"
    - "options.lua"
    - "keymaps.lua"
    - "autocmds.lua"
  become: false

- name: Copy Neovim plugin configuration files
  copy:
    src: "lua/plugins/{{ item }}"
    dest: "{{ user_home.stdout }}/.config/nvim/lua/plugins/{{ item }}"
    force: yes
  with_items:
    - "init.lua"
  become: false

- name: Copy Neovim snippet files
  copy:
    src: "snippets/{{ item }}"
    dest: "{{ user_home.stdout }}/.config/nvim/snippets/{{ item }}"
    force: yes
  with_items:
    - "php.json"
    - "markdown.json"
    - "javascript.json"
    - "typescript.json"
    - "typescriptreact.json"
    - "python.json"
  become: false

- name: Configure Neovim to use pynvim from virtual environment
  blockinfile:
    path: "{{ user_home.stdout }}/.config/nvim/lua/core/init.lua"
    block: |
      -- Set Python provider path
      vim.g.python3_host_prog = "{{ user_home.stdout }}/.config/nvim/env/bin/python"
    insertafter: "-- Core configuration loader"
    marker: "-- {mark} ANSIBLE MANAGED BLOCK"
  become: false

# Create data directories
- name: Create Neovim data directories
  file:
    path: "{{ user_home.stdout }}/.local/share/nvim/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ username_result.stdout }}"
    group: "{{ username_result.stdout }}"
  with_items:
    - "site"
    - "undo"
  become: false

# Install Nerd Fonts
- name: Install Nerd Font (macOS)
  homebrew:
    name: font-hack-nerd-font
    state: present
    cask: yes
  when: ansible_os_family == "Darwin"

- name: Inform about manual font installation (Linux)
  debug:
    msg: "For the best experience, please install a Nerd Font manually: https://www.nerdfonts.com/font-downloads"
  when: ansible_os_family == "Debian"

  # Fix nvim-lspconfig ts_ls bug (double-wrapped table issue)
- name: Fix ts_ls.lua root_dir bug in nvim-lspconfig
  replace:
    path: "{{ user_home.stdout }}/.local/share/nvim/lazy/nvim-lspconfig/lsp/ts_ls.lua"
    regexp: 'local project_root = vim\.fs\.root\(bufnr, \{ project_root_markers \}\)'
    replace: 'local project_root = vim.fs.root(bufnr, project_root_markers)'
  become: false
  ignore_errors: yes

  # Add these verification tasks at the end of the file
- name: Verify Neovim setup with healthcheck
  shell: nvim --headless -c "checkhealth" -c "q" > /tmp/nvim_health_check.log 2>&1
  args:
    creates: "/tmp/nvim_health_check.log"
  changed_when: false
  register: health_check

- name: Display healthcheck results location
  debug:
    msg: "Neovim health check log available at /tmp/nvim_health_check.log"
